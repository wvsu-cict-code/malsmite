[gd_scene load_steps=45 format=2]

[ext_resource path="res://menu_sequence/0023.png" type="Texture" id=1]
[ext_resource path="res://gui/menu-background.png" type="Texture" id=2]
[ext_resource path="res://gui/full-logo.png" type="Texture" id=3]
[ext_resource path="res://MainMenu.gd" type="Script" id=4]
[ext_resource path="res://menu_sequence/0009.png" type="Texture" id=5]
[ext_resource path="res://menu_sequence/0003.png" type="Texture" id=6]
[ext_resource path="res://menu_sequence/0011.png" type="Texture" id=7]
[ext_resource path="res://menu_sequence/0013.png" type="Texture" id=8]
[ext_resource path="res://menu_sequence/0017.png" type="Texture" id=9]
[ext_resource path="res://menu_sequence/0015.png" type="Texture" id=10]
[ext_resource path="res://menu_sequence/0018.png" type="Texture" id=11]
[ext_resource path="res://menu_sequence/0024.png" type="Texture" id=12]
[ext_resource path="res://menu_sequence/0020.png" type="Texture" id=13]
[ext_resource path="res://menu_sequence/0007.png" type="Texture" id=14]
[ext_resource path="res://menu_sequence/0021.png" type="Texture" id=15]
[ext_resource path="res://menu_sequence/0008.png" type="Texture" id=16]
[ext_resource path="res://menu_sequence/0002.png" type="Texture" id=17]
[ext_resource path="res://menu_sequence/0014.png" type="Texture" id=18]
[ext_resource path="res://menu_sequence/0001.png" type="Texture" id=19]
[ext_resource path="res://menu_sequence/0016.png" type="Texture" id=20]
[ext_resource path="res://menu_sequence/0019.png" type="Texture" id=21]
[ext_resource path="res://menu_sequence/0022.png" type="Texture" id=22]
[ext_resource path="res://menu_sequence/0005.png" type="Texture" id=23]
[ext_resource path="res://menu_sequence/0006.png" type="Texture" id=24]
[ext_resource path="res://menu_sequence/0004.png" type="Texture" id=25]
[ext_resource path="res://menu_sequence/0010.png" type="Texture" id=26]
[ext_resource path="res://menu_sequence/0012.png" type="Texture" id=27]
[ext_resource path="res://menu_sequence/0025.png" type="Texture" id=28]
[ext_resource path="res://gui/start.png" type="Texture" id=29]
[ext_resource path="res://fonts/Staatliches-Regular.ttf" type="DynamicFontData" id=30]
[ext_resource path="res://gui/bot-2.png" type="Texture" id=31]
[ext_resource path="res://gui/bot-1.png" type="Texture" id=32]
[ext_resource path="res://gui/bot-3.png" type="Texture" id=33]
[ext_resource path="res://gui/hex-bg.png" type="Texture" id=34]
[ext_resource path="res://gui/start-pressed.png" type="Texture" id=35]

[sub_resource type="SpriteFrames" id=1]
animations = [ {
"frames": [ ExtResource( 19 ), ExtResource( 17 ), ExtResource( 6 ), ExtResource( 25 ), ExtResource( 23 ), ExtResource( 24 ), ExtResource( 14 ), ExtResource( 16 ), ExtResource( 5 ), ExtResource( 26 ), ExtResource( 7 ), ExtResource( 27 ), ExtResource( 8 ), ExtResource( 18 ), ExtResource( 10 ), ExtResource( 20 ), ExtResource( 9 ), ExtResource( 11 ), ExtResource( 21 ), ExtResource( 13 ), ExtResource( 15 ), ExtResource( 22 ), ExtResource( 1 ), ExtResource( 12 ), ExtResource( 28 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[sub_resource type="Shader" id=2]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.4
shader_param/scanlines_width = 0.25
shader_param/grille_opacity = 0.3
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = true
shader_param/roll = true
shader_param/roll_speed = 8.0
shader_param/roll_size = 15.0
shader_param/roll_variation = 1.8
shader_param/distort_intensity = 0.05
shader_param/noise_opacity = 0.4
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.06
shader_param/aberration = 0.03
shader_param/brightness = 1.4
shader_param/discolor = true
shader_param/warp_amount = 1.0
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.5

[sub_resource type="Animation" id=4]
length = 5.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Control:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 2.5, 5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 255.74, 391.142 ), Vector2( 255.74, 360.87 ), Vector2( 255.74, 391.142 ) ]
}

[sub_resource type="Animation" id=5]
loop = true

[sub_resource type="Animation" id=6]
loop = true

[sub_resource type="Animation" id=7]
resource_name = "LogoLoop"
length = 5.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("TextureRect:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2, 0.4, 0.7, 0.8, 1, 3.2, 3.4, 3.6, 3.9, 4, 4.2 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 0.917647, 0.937255, 0.8, 0.780392 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0.270588 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 1 ), Color( 0.917647, 0.937255, 0.8, 0.780392 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0.270588 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="DynamicFont" id=8]
size = 84
font_data = ExtResource( 30 )

[sub_resource type="Animation" id=9]
resource_name = "BotLoop"
length = 5.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("bot-1:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 2.5, 5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 1039.46, 189.303 ), Vector2( 1067.46, 167.303 ), Vector2( 1039.46, 189.303 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("bot-2:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1.5, 3.6, 5 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 987.462, 415.303 ), Vector2( 933.462, 419.303 ), Vector2( 955.462, 485.303 ), Vector2( 987.462, 415.303 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("bot-3:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 2.1, 3.6, 5 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 1142.26, 348.303 ), Vector2( 1194.26, 360.303 ), Vector2( 1202.26, 396.303 ), Vector2( 1142.26, 348.303 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("bot-6:position")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 2.3, 4.5, 5 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 1249.89, 196.257 ), Vector2( 1234.18, 169.318 ), Vector2( 1251.47, 229.432 ), Vector2( 1249.89, 196.257 ) ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("bot-4:position")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 0.6, 3.1, 5 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 1447.85, 280.259 ), Vector2( 1398.46, 311.688 ), Vector2( 1431.01, 340.974 ), Vector2( 1447.85, 280.259 ) ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("bot-5:position")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0, 2.8, 5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 1342.73, 481.321 ), Vector2( 1340.49, 546.424 ), Vector2( 1342.73, 481.321 ) ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("bot-7:position")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0, 1.7, 3.2, 5 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 1177.87, 520.877 ), Vector2( 1153.18, 570.265 ), Vector2( 1180.12, 617.408 ), Vector2( 1177.87, 520.877 ) ]
}

[node name="Control" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 1.0
margin_right = 1.0
script = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TextureRect2" type="TextureRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 2 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TextureRect" type="TextureRect" parent="TextureRect2"]
modulate = Color( 1, 1, 1, 0.901961 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 34 )
expand = true
stretch_mode = 6

[node name="bot-1" type="Sprite" parent="."]
position = Vector2( 1046.25, 183.966 )
scale = Vector2( 0.221527, 0.221527 )
texture = ExtResource( 32 )

[node name="bot-4" type="Sprite" parent="."]
position = Vector2( 1398.54, 311.763 )
rotation = -0.951409
scale = Vector2( 0.221527, 0.221527 )
texture = ExtResource( 32 )

[node name="bot-2" type="Sprite" parent="."]
position = Vector2( 965.63, 416.92 )
scale = Vector2( 0.221527, 0.221527 )
texture = ExtResource( 31 )

[node name="bot-6" type="Sprite" parent="."]
position = Vector2( 1245.75, 189.154 )
rotation = -0.591521
scale = Vector2( 0.13809, 0.13809 )
texture = ExtResource( 31 )

[node name="bot-3" type="Sprite" parent="."]
position = Vector2( 1157.28, 351.768 )
scale = Vector2( 0.163589, 0.163589 )
texture = ExtResource( 33 )

[node name="bot-5" type="Sprite" parent="."]
position = Vector2( 1342.24, 495.422 )
rotation = 1.37385
scale = Vector2( 0.163589, 0.163589 )
texture = ExtResource( 33 )

[node name="bot-7" type="Sprite" parent="."]
position = Vector2( 1169.06, 538.495 )
rotation = -0.172704
scale = Vector2( 0.104714, 0.104714 )
texture = ExtResource( 33 )

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
position = Vector2( 411.819, 350 )
frames = SubResource( 1 )
frame = 7
speed_scale = 2.0
playing = true

[node name="TextureRect3" type="TextureRect" parent="."]
modulate = Color( 0.909804, 0.694118, 1, 0.513726 )
material = SubResource( 3 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 2 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Control" type="Control" parent="."]
margin_left = 255.74
margin_top = 391.142
margin_right = 295.74
margin_bottom = 431.142
rect_scale = Vector2( 1.28655, 1.28655 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "Loop"
anims/Loop = SubResource( 4 )
anims/Loop2 = SubResource( 5 )

[node name="AnimationPlayer2" type="AnimationPlayer" parent="."]
anims/Loop2 = SubResource( 6 )

[node name="TextureRect" type="TextureRect" parent="."]
modulate = Color( 1, 1, 1, 0.914951 )
anchor_left = 0.5
anchor_right = 0.5
margin_left = -350.5
margin_top = 113.871
margin_right = 350.5
margin_bottom = 384.871
texture = ExtResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ButtonNewGame" type="Button" parent="."]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -317.799
margin_top = -263.809
margin_right = -235.799
margin_bottom = -243.809
rect_scale = Vector2( 2, 2 )
text = "New Game"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ButtonCredits" type="Button" parent="."]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -575.08
margin_top = -288.065
margin_right = -493.08
margin_bottom = -268.065
rect_scale = Vector2( 2, 2 )
text = "Credits"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ButtonRankings" type="Button" parent="."]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -48.3801
margin_top = -257.606
margin_right = 33.6199
margin_bottom = -237.606
rect_scale = Vector2( 2, 2 )
text = "Lore"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer3" type="AnimationPlayer" parent="."]
autoplay = "LogoLoop"
anims/LogoLoop = SubResource( 7 )

[node name="TextureButton" type="TextureButton" parent="."]
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -101.0
margin_top = -328.858
margin_right = 319.0
margin_bottom = 68.142
rect_scale = Vector2( 0.5, 0.5 )
texture_normal = ExtResource( 29 )
texture_pressed = ExtResource( 35 )
expand = true
stretch_mode = 4
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="TextureButton"]
anchor_left = 1.0
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
margin_left = -295.858
margin_top = 198.5
margin_right = -114.858
margin_bottom = 304.5
custom_fonts/font = SubResource( 8 )
custom_colors/font_color = Color( 0, 1, 0.741176, 1 )
text = "START"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer4" type="AnimationPlayer" parent="."]
autoplay = "BotLoop"
anims/BotLoop = SubResource( 9 )

[node name="Label" type="Label" parent="."]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -532.0
margin_top = -79.0
margin_right = -230.0
margin_bottom = -65.0
rect_scale = Vector2( 1.5, 1.5 )
text = "BG Concept: Krystal Ann Dacles Sayco (EMC 1A)"
__meta__ = {
"_edit_use_anchors_": false
}

[connection signal="pressed" from="ButtonNewGame" to="." method="_on_ButtonNewGame_pressed"]
[connection signal="pressed" from="TextureButton" to="." method="_on_TextureButton_pressed"]
